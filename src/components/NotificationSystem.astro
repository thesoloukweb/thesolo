---
// Notification System Component
---

<!-- Notification Container -->
<div id="notification-container" class="fixed top-4 right-4 z-50 space-y-3 max-w-sm">
  <!-- Notifications will be dynamically inserted here -->
</div>

<script>
  // Notification System
  declare global {
    interface Window {
      showNotification: (message: string, type?: 'success' | 'error' | 'warning' | 'info', duration?: number) => HTMLElement | undefined;
      showLoadingNotification: (message: string) => HTMLElement | undefined;
      removeLoadingNotification: (notification: HTMLElement) => void;
      showSuccessWithCelebration: (message: string) => void;
    }
  }

  window.showNotification = function(message: string, type: 'success' | 'error' | 'warning' | 'info' = 'info', duration: number = 5000) {
    const container = document.getElementById('notification-container');
    if (!container) return undefined;

    // Create notification element
    const notification = document.createElement('div');
    notification.className = `
      notification transform translate-x-full opacity-0 transition-all duration-300 ease-out
      bg-brand-dark-card border-l-4 rounded-lg shadow-lg p-4 backdrop-blur-sm
      ${type === 'success' ? 'border-green-500 bg-green-900/20' : ''}
      ${type === 'error' ? 'border-red-500 bg-red-900/20' : ''}
      ${type === 'warning' ? 'border-yellow-500 bg-yellow-900/20' : ''}
      ${type === 'info' ? 'border-brand-gold bg-brand-gold/10' : ''}
    `;

    // Icon based on type
    const icons = {
      success: '✅',
      error: '❌',
      warning: '⚠️',
      info: 'ℹ️'
    };

    notification.innerHTML = `
      <div class="flex items-start space-x-3">
        <div class="flex-shrink-0 text-xl">
          ${icons[type]}
        </div>
        <div class="flex-1 min-w-0">
          <p class="text-sm font-medium text-white leading-relaxed">
            ${message}
          </p>
        </div>
        <button class="flex-shrink-0 ml-2 text-white/60 hover:text-white transition-colors" onclick="this.closest('.notification').remove()">
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    `;

    // Add to container
    container.appendChild(notification);

    // Animate in
    setTimeout(() => {
      notification.classList.remove('translate-x-full', 'opacity-0');
      notification.classList.add('translate-x-0', 'opacity-100');
    }, 100);

    // Auto remove after duration
    if (duration > 0) {
      setTimeout(() => {
        removeNotification(notification);
      }, duration);
    }

    return notification;
  };

  function removeNotification(notification: HTMLElement) {
    notification.classList.add('translate-x-full', 'opacity-0');
    setTimeout(() => {
      notification.remove();
    }, 300);
  }

  // Loading notification
  window.showLoadingNotification = function(message: string) {
    const container = document.getElementById('notification-container');
    if (!container) return undefined;

    const notification = document.createElement('div');
    notification.className = `
      notification transform translate-x-full opacity-0 transition-all duration-300 ease-out
      bg-brand-dark-card border-l-4 border-brand-gold bg-brand-gold/10 rounded-lg shadow-lg p-4 backdrop-blur-sm
    `;

    notification.innerHTML = `
      <div class="flex items-start space-x-3">
        <div class="flex-shrink-0">
          <div class="animate-spin rounded-full h-5 w-5 border-2 border-brand-gold border-t-transparent"></div>
        </div>
        <div class="flex-1 min-w-0">
          <p class="text-sm font-medium text-white leading-relaxed">
            ${message}
          </p>
        </div>
      </div>
    `;

    container.appendChild(notification);

    setTimeout(() => {
      notification.classList.remove('translate-x-full', 'opacity-0');
      notification.classList.add('translate-x-0', 'opacity-100');
    }, 100);

    return notification;
  };

  // Remove loading notification
  window.removeLoadingNotification = function(notification: HTMLElement) {
    if (notification) {
      removeNotification(notification);
    }
  };

  // Success with celebration effect
  window.showSuccessWithCelebration = function(message: string) {
    // Show success notification
    window.showNotification(message, 'success', 6000);
    
    // Add celebration effect
    createCelebrationEffect();
  };

  function createCelebrationEffect() {
    // Subtle celebration effect - fewer particles
    const colors = ['#C49A85', '#D4A574'];
    
    for (let i = 0; i < 8; i++) {
      setTimeout(() => {
        const confetti = document.createElement('div');
        confetti.style.cssText = `
          position: fixed;
          top: 15%;
          right: ${Math.random() * 20 + 5}%;
          width: 6px;
          height: 6px;
          background: ${colors[Math.floor(Math.random() * colors.length)]};
          border-radius: 50%;
          pointer-events: none;
          z-index: 9999;
          animation: confetti-fall 1.5s ease-out forwards;
        `;
        
        document.body.appendChild(confetti);
        
        setTimeout(() => confetti.remove(), 1500);
      }, i * 150);
    }
  }

  // Add CSS for confetti animation
  if (!document.querySelector('#confetti-styles')) {
    const style = document.createElement('style');
    style.id = 'confetti-styles';
    style.textContent = `
      @keyframes confetti-fall {
        0% {
          transform: translateY(0) rotate(0deg) scale(1);
          opacity: 1;
        }
        100% {
          transform: translateY(300px) rotate(360deg) scale(0);
          opacity: 0;
        }
      }
    `;
    document.head.appendChild(style);
  }
</script>

<style>
  .notification {
    max-width: 350px;
  }
  
  @media (max-width: 640px) {
    #notification-container {
      right: 1rem;
      left: 1rem;
      max-width: none;
    }
    
    .notification {
      max-width: none;
    }
  }
</style>
