# PROJECT GOAL
Build a lightning-fast, SEO-friendly, fully responsive **static** restaurant website with Astro (SSG). 
Pages: Home (/), About (/hakkimizda), Menu (/menu), Gallery (/galeri), Contact (/iletisim).
Optional Blog at /blog using **Decap (Netlify) CMS** with GitHub backend (Git-based CMS).

# DESIGN HANDOFF
- Implement visuals strictly from the provided Figma. 
- Use Tailwind utility classes; no inline styles except for one-off fixes.
- Maintain design tokens (colors, spacing, radius, typography) as Tailwind theme extensions.

# TECH STACK
- Astro 4+ (SSG; SSR disabled).
- TypeScript (strict).
- Tailwind CSS.
- MDX support for blog posts.
- Astro Image optimization (`<Image />`) for local assets.
- Minimal vanilla JS islands only where needed (OpenTable widget & gallery lightbox).
- Linting/formatting: ESLint + Prettier.

# STRUCTURE
- src/
  - components/: Header, Footer, Nav, SEO, Hero, ReservationCTA, OpenTableWidget, MenuGrid, GalleryLightbox, ContactCard
  - layouts/: BaseLayout.astro, BlogLayout.astro
  - pages/: index.astro, hakkimizda.astro, menu.astro, galeri.astro, iletisim.astro
    - blog/index.astro, blog/[slug].astro
  - content/
    - blog/  (MDX files generated by CMS)
    - config.ts (Astro Content Collections schema)
  - styles/: globals.css
  - utils/: seo.ts (site meta), schema.ts (JSON-LD helpers)
- public/
  - uploads/ (media folder managed by CMS)
- admin/
  - index.html (Decap CMS app)
  - config.yml (Decap CMS configuration)
- astro.config.mjs, tailwind.config.cjs, vercel.json (or netlify.toml), .eslintrc, .prettierrc

# ROUTING & FEATURES
- Home: hero, featured sections, CTAs (“mailto:” and “OpenTable”), previews to subpages. 
- About, Menu, Gallery, Contact: static content per Figma.
- Reservation:
  - Primary CTA uses **mailto:** with prefilled subject/body.
  - **OpenTable** embedded via a dedicated hydrated island (OpenTableWidget).
- Gallery: responsive grid + lightweight vanilla lightbox island (keyboard & ESC).
- Contact: phone `tel:`, email `mailto:`, map embed; opening hours.

# BLOG (GIT-BASED CMS)
- Use **Astro Content Collections** for blog:
  - `/src/content/config.ts` schema (zod): title, description, date, hero, tags, body (MDX).
  - Blog list at `/blog` ordered by date (desc). Detail at `/blog/[slug]`.
- **Decap (Netlify) CMS** setup:
  - `/admin/index.html` loads Decap bundle from CDN; add `<meta name="robots" content="noindex">`.
  - `/admin/config.yml` with:
    - `backend: github` (repo, branch).
    - `media_folder: public/uploads`, `public_folder: /uploads`.
    - `collections.blog.folder: src/content/blog`, `extension: mdx`, `format: frontmatter`.
    - `fields`: title (string), description (text), date (datetime), hero (image), tags (list), body (markdown).
    - `publish_mode: editorial_workflow` (draft → review → publish) if needed.
  - **Auth options**:
    - **Netlify hosting:** `backend: git-gateway` + enable Identity + Git Gateway (no extra server).
    - **Vercel (or other):** keep `backend: github`; add a small OAuth bridge (`base_url` + `auth_endpoint`) as a serverless function to exchange GitHub OAuth code for a token.
  - Local development: `local_backend: true` and run `npx decap-server`.
- Publishing flow: Author logs into `/admin` → creates/edits post → CMS commits to GitHub → host (Vercel/Netlify) rebuilds → post goes live.

# SEO & METADATA
- Use a shared `<SEO />` component with props: title, description, image, path, jsonLd?.
- Generate canonical, OG, Twitter cards, and preload critical hero image as needed.
- `@astrojs/sitemap` + `robots.txt` (include sitemap line).
- JSON-LD helpers in `schema.ts`: Restaurant / LocalBusiness / FAQ / ReservationAction (where relevant).

# PERFORMANCE
- Default zero-JS; hydrate only islands (OpenTableWidget, GalleryLightbox).
- `astro-compress` (HTML, Brotli/Gzip).
- Image pipeline: AVIF/WebP, correct `sizes`, lazy loading.
- Link prefetch: enable Astro Prefetch for in-viewport/hovered links.
- Optional PWA: `@vite-pwa/astro` to cache static assets for snappy revisits.

# CACHING (CDN + BROWSER)
- HTML: `Cache-Control: max-age=0, must-revalidate`.
- Hashed assets: `public, max-age=31536000, immutable`.
- Configure via `vercel.json` (or Netlify headers).

# ACCESSIBILITY
- Semantic landmarks, accessible nav, visible focus rings.
- All images have meaningful `alt`. Motion respects `prefers-reduced-motion`.

# OPEN TABLE & MAILTO
- `ReservationCTA`:
  - `mailto:CONTACT_EMAIL?subject=Reservation&body=Name%3A%0ADate%3A%0ATime%3A%0AParty%20Size%3A`
- `OpenTableWidget`:
  - Isolated island; load vendor script/iframe only inside this component.

# QUALITY GATES (DEFINITION OF DONE)
- Lighthouse (Mobile): Performance ≥ 95, SEO ≥ 95, Best Practices ≥ 95, A11y ≥ 95.
- No client-side JS outside designated islands.
- Valid HTML; no CLS on hero/above-the-fold.
- Blog create/edit works end-to-end via `/admin` (commit → rebuild → live).
- README includes: dev, build, deploy, CMS login, adding a blog post.

# ENV & VARS
- Use `.env` for `SITE_URL`, `CONTACT_EMAIL`, `OPENTABLE_WIDGET_URL` (if applicable).
- `astro.config.mjs` → `site: SITE_URL`.

# DON’TS
- Don’t hardcode text copy (comes from Figma/contents).
- Don’t import heavy JS libraries for simple UI (use vanilla where possible).
- Don’t bypass Image optimization for local assets (except CMS uploads in /public/uploads).